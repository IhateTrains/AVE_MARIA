# Title decisions are possible vs _all_ titles and are shown in the Title Diplomacy View, not the Intrigue View. The taker is in the FROM scope.
#
# filter = [capital/primary_title/owned/vassal_owned/sub_realm_owned/realm_owned/dynasty_owned/all]
# ai_target_filter = [capital/primary_title/owned/vassal_owned/sub_realm_owned/realm_owned/dynasty_owned/all] (which titles for which the AI evaluates the decision.)
#	owned: all titles owned by the AI
#	vassal_owned: all titles owned by direct vassal rulers of the AI's employer
#	sub_realm_owned: all titles below the AI's employer
#	realm_owned: all titles in the same top realm as the AI
#	dynasty_owned: all titles owned by members of the same dynasty
#	all: all titles (Avoid if possible. VERY CPU-HEAVY!)
#	

# Targetted decisions are possible vs _all_ other characters and shown are in the Diplomacy View, not the Intrigue View. The taker is in the FROM scope.
#
# filter = [self/court/home_court/vassals/sub_realm/realm/dynasty/all] ('self' MUST be set for decisions targetting only the taker, the other filter types can be set to lessen CPU load)
# ai_target_filter = [self/court/home_court/vassals/sub_realm/realm/dynasty/all] (which characters for which the AI evaluates the decision.)
#	court: all characters in the AI's host court, including prisoners, and characters currently away (wards, prisoners, etc)
#	home_court: all characters in the AI's home court, including prisoners, and characters currently away (wards, prisoners, etc)
#	vassals: direct vassal rulers of the AI's employer
#	sub_realm: all characters below the AI's employer
#	realm: all characters in the same top realm as the AI
#	dynasty: all members of the same dynasty
#	rivals: your rivals plus any character you have an opinion modifier with 'crime = yes' set (the same set of characters the 'is_foe' trigger evaluates)
#	all: all living characters (Avoid if possible. VERY CPU-HEAVY!)
#

########################################################################################
#                                         											   #
# AVE MARIA decisions																   #
# A Very Extensive Modification for Appropriate Realism and Improved Authenticity	   #
#                                         											   #
# Roman Administration Decisions						                        	   #
#                               													   #
########################################################################################

# Written by Atreides

decisions = {

	#Decision to call all the tagma at once instead of manually selecting each of them
	roman_adminisration_muster_all_the_tagma = {
		is_high_prio = yes
		ai_check_interval = 12
		potential = {
			primary_title = {
				OR = { 
					title = e_byzantium
					title = e_roman_empire
				}
				has_law = succ_byzantine_elective
			}
			war = yes
		}
		allow = {
			
		}
		effect = {
			any_realm_lord = {
				limit = {
					AND = {
						# is_landed = yes
						any_demesne_title = {
							roman_adminisration_tagma_title_held_trigger = yes
						}
					}
				}
				join_attacker_wars = ROOT
				join_defender_wars = ROOT
			}
		}
	}
	
}

targetted_decisions = {

	#Decision to call manually a tagma instead of calling all of them
	roman_administration_muster_the_army = {
		only_independent = yes
		filter = realm
		ai_target_filter = realm
		
		potential = {
			any_demesne_title = {
				OR = {
					roman_adminisration_theme_title_held_trigger = yes
					roman_adminisration_tagma_title_held_trigger = yes
				}
			}
		}
		
		from_potential = {
			is_playable = yes
			is_landed = yes
			mercenary = no
			holy_order = no
			primary_title = {
				OR = {
					title = e_byzantium
					title = e_roman_empire
				}
				has_law = succ_byzantine_elective
			}
		}
		
		allow = {
			FROM = {
				war = yes
			}
			war = no
		}
		
		effect = {
			if = {
				limit = {
					FROM = { is_primary_war_attacker = yes }
				}
				ROOT = { join_attacker_wars = FROM }
			}
			if = {
				limit = {
					FROM = { is_primary_war_defender = yes }
				}
				ROOT = { join_defender_wars = FROM }
			}
		}
		
		revoke_allowed = {
			always = no #Not used in vanilla
		}
		
		ai_will_do = {
			#Factors for an AI character to take the decision (1 = 100% chance every month - for each allowed target!)
		}
		ai_acceptance = {
			factor = 100
			yes_threshold = 100
		}
	}
}